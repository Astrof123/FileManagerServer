/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Filemanager"] = factory();
	else
		root["Filemanager"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/filemanager.js":
/*!****************************!*\
  !*** ./src/filemanager.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileManager: () => (/* binding */ FileManager),\n/* harmony export */   FileManagerServer: () => (/* binding */ FileManagerServer)\n/* harmony export */ });\n\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass FileManagerServer {\r\n}\r\n\r\nclass FileManager {\r\n    constructor(root, FileManagerServer, rootFolderName = 'Root') {\r\n        this.image_extension = ['png', 'jpg', 'jpeg', 'webp'];\r\n        this.rootFolderName = rootFolderName;\r\n        this.FileManagerServer = FileManagerServer;\r\n        if (!(root instanceof HTMLElement)) {\r\n            throw new SyntaxError(\"An empty or invalid variable type was passed.\");\r\n        }\r\n        this.root = root;\r\n        this.initInterface();\r\n    }\r\n    createHTMLFileList(file) {\r\n        var _a;\r\n        let file_blockHTML = document.createElement(\"div\");\r\n        file_blockHTML.classList.add(\"file_block\");\r\n        let file_iconHTML = document.createElement(\"img\");\r\n        file_iconHTML.classList.add(\"file_icon\");\r\n        let file_typeHTML = document.createElement(\"span\");\r\n        file_typeHTML.classList.add(\"file_type\");\r\n        file_typeHTML.classList.add(\"file_metadata\");\r\n        if (file.isFolder) {\r\n            file_iconHTML.src = \"icons/folder.png\";\r\n            file_typeHTML.textContent = \"Folder\";\r\n        }\r\n        else {\r\n            let ext = file.name.split('.');\r\n            if (this.image_extension.includes(ext[ext.length - 1])) {\r\n                file_iconHTML.src = \"icons/picture.png\";\r\n                file_typeHTML.textContent = \"Image\";\r\n            }\r\n            else {\r\n                file_iconHTML.src = \"icons/textfile.png\";\r\n                file_typeHTML.textContent = \"File\";\r\n            }\r\n        }\r\n        let file_nameHTML = document.createElement(\"span\");\r\n        file_nameHTML.classList.add(\"file_name\");\r\n        file_nameHTML.classList.add(\"file_metadata\");\r\n        file_nameHTML.textContent = file.name;\r\n        let file_changedateHTML = document.createElement(\"span\");\r\n        file_changedateHTML.classList.add(\"file_changedate\");\r\n        file_changedateHTML.classList.add(\"file_metadata\");\r\n        file_changedateHTML.textContent = file.changedate;\r\n        let file_sizeHTML = document.createElement(\"span\");\r\n        file_sizeHTML.classList.add(\"file_size\");\r\n        file_sizeHTML.classList.add(\"file_metadata\");\r\n        file_sizeHTML.textContent = file.isFolder ? \"\" : file.size;\r\n        file_blockHTML.append(file_iconHTML);\r\n        file_blockHTML.append(file_nameHTML);\r\n        file_blockHTML.append(file_changedateHTML);\r\n        file_blockHTML.append(file_typeHTML);\r\n        file_blockHTML.append(file_sizeHTML);\r\n        (_a = this.files_listHTML) === null || _a === void 0 ? void 0 : _a.append(file_blockHTML);\r\n        return file_blockHTML;\r\n    }\r\n    createHTMLNavFolder(folder, root) {\r\n        let folder_wrapperHTML = document.createElement(\"div\");\r\n        folder_wrapperHTML.classList.add(\"folder_wrapper\");\r\n        let folder_childrenHTML = document.createElement(\"div\");\r\n        folder_childrenHTML.classList.add(\"folder_children\");\r\n        let folderHTML = document.createElement(\"div\");\r\n        folderHTML.classList.add(\"folder_parent\");\r\n        let folder_open_icon_wrapperHTML = document.createElement(\"div\");\r\n        folder_open_icon_wrapperHTML.classList.add(\"folder_open_icon_wrapper\");\r\n        let folder_open_iconHTML = document.createElement(\"img\");\r\n        folder_open_iconHTML.classList.add(\"folder_open_icon\");\r\n        folder_open_iconHTML.src = \"icons/arrow-point-to-right.png\";\r\n        let folder_iconHTML = document.createElement(\"img\");\r\n        folder_iconHTML.classList.add(\"folder_icon\");\r\n        folder_iconHTML.src = \"icons/folder.png\";\r\n        let folder_nameHTML = document.createElement(\"span\");\r\n        folder_nameHTML.classList.add(\"folder_name\");\r\n        folder_nameHTML.textContent = folder.name;\r\n        folder_open_icon_wrapperHTML.append(folder_open_iconHTML);\r\n        folderHTML.append(folder_open_icon_wrapperHTML);\r\n        folderHTML.append(folder_iconHTML);\r\n        folderHTML.append(folder_nameHTML);\r\n        folder_wrapperHTML.append(folderHTML);\r\n        folder_wrapperHTML.append(folder_childrenHTML);\r\n        root.append(folder_wrapperHTML);\r\n        return [folder_open_icon_wrapperHTML, folderHTML];\r\n    }\r\n    openCloseFolder(folder_parent_1) {\r\n        return __awaiter(this, arguments, void 0, function* (folder_parent, from = \"nav\") {\r\n            let folder_open_icon = folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.querySelector('.folder_open_icon');\r\n            let folder_wrapper = folder_parent.closest('.folder_wrapper');\r\n            let folder_children = folder_wrapper === null || folder_wrapper === void 0 ? void 0 : folder_wrapper.querySelector('.folder_children');\r\n            let folder_name = folder_parent.querySelector('.folder_name');\r\n            if (folder_wrapper != null && folder_name != null && folder_open_icon != null && folder_open_icon instanceof HTMLImageElement && folder_children != null && folder_children != undefined) {\r\n                let children = folder_children.children;\r\n                if ((folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.classList.contains('opened')) && from !== \"filelist\") {\r\n                    folder_parent.classList.remove('opened');\r\n                    folder_open_icon.src = \"icons/arrow-point-to-right.png\";\r\n                    for (const child of children) {\r\n                        if (child instanceof HTMLElement) {\r\n                            child.style.display = \"none\";\r\n                        }\r\n                    }\r\n                }\r\n                else if (!(folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.classList.contains('opened'))) {\r\n                    folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.classList.add('opened');\r\n                    folder_open_icon.src = \"icons/arrow-point-to-down.png\";\r\n                    if (children.length === 0) {\r\n                        if (folder_name === null || folder_name === void 0 ? void 0 : folder_name.textContent) {\r\n                            let path = this.getPath(folder_wrapper, folder_name === null || folder_name === void 0 ? void 0 : folder_name.textContent);\r\n                            yield this.getInternalFolders(folder_children, path);\r\n                        }\r\n                        else {\r\n                            throw new Error('The hierarchy of elements was violated');\r\n                        }\r\n                    }\r\n                    else {\r\n                        for (const child of children) {\r\n                            if (child instanceof HTMLElement) {\r\n                                child.style.display = \"block\";\r\n                            }\r\n                            else {\r\n                                throw new Error('The hierarchy of elements was violated');\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('The hierarchy of elements was violated');\r\n            }\r\n        });\r\n    }\r\n    handleOpenNavFolderClick(event) {\r\n        event.stopPropagation();\r\n        if (event.target != null && event.target instanceof HTMLElement) {\r\n            let targetElem = event.target;\r\n            let folder_parent = targetElem.closest('.folder_parent');\r\n            if (folder_parent != null && folder_parent instanceof HTMLElement) {\r\n                this.openCloseFolder(folder_parent, 'nav');\r\n            }\r\n            else {\r\n                throw new Error('The hierarchy of elements was violated');\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n    }\r\n    getPath(wrapper, folderName) {\r\n        var _a, _b;\r\n        if (wrapper == null) {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        let buff_div = wrapper;\r\n        let path;\r\n        if (folderName != null) {\r\n            if (buff_div.classList.contains(\"folder_root_wrapper\")) {\r\n                path = \"/\";\r\n            }\r\n            else {\r\n                path = \"/\" + folderName;\r\n                buff_div = (_a = buff_div.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;\r\n                if (buff_div == null) {\r\n                    throw new Error('The hierarchy of elements was violated');\r\n                }\r\n                while (!buff_div.classList.contains(\"folder_root_wrapper\")) {\r\n                    let buff_span = buff_div.querySelector(\".folder_name\");\r\n                    path = `/${buff_span === null || buff_span === void 0 ? void 0 : buff_span.textContent}${path}`;\r\n                    buff_div = (_b = buff_div.parentElement) === null || _b === void 0 ? void 0 : _b.parentElement;\r\n                    if (buff_div == null) {\r\n                        throw new Error('The hierarchy of elements was violated');\r\n                    }\r\n                }\r\n            }\r\n            return path;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n    }\r\n    handleShowFileListClick(event) {\r\n        var _a;\r\n        event.stopPropagation();\r\n        if (event.target != null && event.target instanceof HTMLElement) {\r\n            let targetElem = event.target;\r\n            let folder_wrapper = targetElem.closest('.folder_wrapper');\r\n            let folder_parent = targetElem.closest('.folder_parent');\r\n            let folder_name = folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.querySelector(\".folder_name\");\r\n            if (folder_wrapper != null && folder_parent != null && folder_name != null && folder_parent instanceof HTMLElement && folder_name.textContent) {\r\n                let path = this.getPath(folder_wrapper, folder_name.textContent);\r\n                if (folder_parent !== this.currentFolder) {\r\n                    (_a = this.currentFolder) === null || _a === void 0 ? void 0 : _a.classList.remove(\"folder_parent__opened\");\r\n                    folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.classList.add(\"folder_parent__opened\");\r\n                    this.currentFolder = folder_parent;\r\n                }\r\n                this.getInternalFiles(path);\r\n            }\r\n            else {\r\n                throw new Error('The hierarchy of elements was violated');\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n    }\r\n    handleOpenFileListFolder(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            var _a, _b, _c, _d;\r\n            event.stopPropagation();\r\n            if (event.target != null && event.target instanceof HTMLElement) {\r\n                if (this.currentFolder != null) {\r\n                    yield this.openCloseFolder(this.currentFolder, 'filelist');\r\n                }\r\n                let targetElem = event.target;\r\n                let file_block = targetElem.closest('.file_block');\r\n                let file_name = file_block === null || file_block === void 0 ? void 0 : file_block.querySelector('.file_name');\r\n                let currentWrapper = (_a = this.currentFolder) === null || _a === void 0 ? void 0 : _a.parentElement;\r\n                let currentChildren = (_b = currentWrapper === null || currentWrapper === void 0 ? void 0 : currentWrapper.querySelector('.folder_children')) === null || _b === void 0 ? void 0 : _b.children;\r\n                if (file_block != null && file_name != null && currentWrapper != null && (file_name === null || file_name === void 0 ? void 0 : file_name.textContent) && currentChildren != null) {\r\n                    let newCurrentFolder;\r\n                    let newCurrentFolderWrapper;\r\n                    for (let wrapper of currentChildren) {\r\n                        if (((_c = wrapper === null || wrapper === void 0 ? void 0 : wrapper.querySelector(\".folder_name\")) === null || _c === void 0 ? void 0 : _c.textContent) === (file_name === null || file_name === void 0 ? void 0 : file_name.textContent)) {\r\n                            newCurrentFolder = wrapper === null || wrapper === void 0 ? void 0 : wrapper.querySelector(\".folder_parent\");\r\n                            newCurrentFolderWrapper = wrapper;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (newCurrentFolder && newCurrentFolder instanceof HTMLElement && newCurrentFolderWrapper != null && newCurrentFolderWrapper instanceof HTMLElement) {\r\n                        let path = this.getPath(newCurrentFolderWrapper, file_name === null || file_name === void 0 ? void 0 : file_name.textContent);\r\n                        (_d = this.currentFolder) === null || _d === void 0 ? void 0 : _d.classList.remove(\"folder_parent__opened\");\r\n                        newCurrentFolder.classList.add(\"folder_parent__opened\");\r\n                        this.currentFolder = newCurrentFolder;\r\n                        if (this.files_listHTML != null) {\r\n                            this.files_listHTML.innerHTML = \"\";\r\n                            this.getInternalFiles(path);\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new Error('The hierarchy of elements was violated');\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('The hierarchy of elements was violated');\r\n                }\r\n            }\r\n        });\r\n    }\r\n    getInternalFolders(folder_children, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let folders = yield this.FileManagerServer.getFolders(path);\r\n            if (folders != null) {\r\n                folders.forEach(folder => {\r\n                    var _a, _b;\r\n                    let newfolder = this.createHTMLNavFolder(folder, folder_children);\r\n                    if (newfolder) {\r\n                        (_a = newfolder[0]) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", this.handleOpenNavFolderClick.bind(this));\r\n                        (_b = newfolder[1]) === null || _b === void 0 ? void 0 : _b.addEventListener(\"click\", this.handleShowFileListClick.bind(this));\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    getInternalFiles(path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let files = yield this.FileManagerServer.getFiles(path);\r\n            if (files != null && this.files_listHTML) {\r\n                this.files_listHTML.innerHTML = \"\";\r\n                files.forEach(file => {\r\n                    let file_block = this.createHTMLFileList(file);\r\n                    if (file.isFolder) {\r\n                        file_block.addEventListener(\"dblclick\", this.handleOpenFileListFolder.bind(this));\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    initInterface() {\r\n        let filemanager_mainHTML = document.createElement(\"div\");\r\n        filemanager_mainHTML.classList.add(\"filemanager_main\");\r\n        // Creating folders_nav\r\n        let folders_navHTML = document.createElement(\"div\");\r\n        folders_navHTML.classList.add(\"folders_nav\");\r\n        let rootfolder = this.createHTMLNavFolder({ name: this.rootFolderName }, folders_navHTML);\r\n        if (rootfolder) {\r\n            let rootfolder_icon_wrapper = rootfolder[0];\r\n            let rootfolder_parent = rootfolder[1];\r\n            let rootfolder_wrapper = rootfolder_parent.closest(\".folder_wrapper\");\r\n            if (rootfolder_wrapper) {\r\n                rootfolder_wrapper.classList.add(\"folder_root_wrapper\");\r\n            }\r\n            rootfolder_icon_wrapper === null || rootfolder_icon_wrapper === void 0 ? void 0 : rootfolder_icon_wrapper.addEventListener(\"click\", this.handleOpenNavFolderClick.bind(this));\r\n            rootfolder_parent === null || rootfolder_parent === void 0 ? void 0 : rootfolder_parent.addEventListener(\"click\", this.handleShowFileListClick.bind(this));\r\n        }\r\n        filemanager_mainHTML.append(folders_navHTML);\r\n        // Creating files_panel\r\n        let files_panelHTML = document.createElement(\"div\");\r\n        files_panelHTML.classList.add(\"files_panel\");\r\n        let metadata_blockHTML = document.createElement(\"div\");\r\n        metadata_blockHTML.classList.add(\"metadata_block\");\r\n        this.files_listHTML = document.createElement(\"div\");\r\n        this.files_listHTML.classList.add(\"files_list\");\r\n        let metadata_nameHTML = document.createElement(\"div\");\r\n        metadata_nameHTML.classList.add(\"metadata_name\");\r\n        metadata_nameHTML.classList.add(\"metadata\");\r\n        metadata_nameHTML.textContent = \"Name\";\r\n        let metadata_changedateHTML = document.createElement(\"div\");\r\n        metadata_changedateHTML.classList.add(\"metadata_changedate\");\r\n        metadata_changedateHTML.classList.add(\"metadata\");\r\n        metadata_changedateHTML.textContent = \"Date of change\";\r\n        let metadata_typeHTML = document.createElement(\"div\");\r\n        metadata_typeHTML.classList.add(\"metadata_type\");\r\n        metadata_typeHTML.classList.add(\"metadata\");\r\n        metadata_typeHTML.textContent = \"Type\";\r\n        let metadata_sizeHTML = document.createElement(\"div\");\r\n        metadata_sizeHTML.classList.add(\"metadata_size\");\r\n        metadata_sizeHTML.classList.add(\"metadata\");\r\n        metadata_sizeHTML.textContent = \"Size\";\r\n        metadata_blockHTML.append(metadata_nameHTML);\r\n        metadata_blockHTML.append(metadata_changedateHTML);\r\n        metadata_blockHTML.append(metadata_typeHTML);\r\n        metadata_blockHTML.append(metadata_sizeHTML);\r\n        files_panelHTML.append(metadata_blockHTML);\r\n        files_panelHTML.append(this.files_listHTML);\r\n        filemanager_mainHTML.append(files_panelHTML);\r\n        this.root.append(filemanager_mainHTML);\r\n    }\r\n}\n\n//# sourceURL=webpack://Filemanager/./src/filemanager.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/filemanager.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});